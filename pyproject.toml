[project]
name = "systematic-review-assistant"
version = "0.1.0"
description = "SR assistant prototype"
readme = { file = "README.md", content-type = "text/markdown" }
# langraph-checkpointer-postges requires <3.12.4 (for some reason)
# This project is pinned to 3.12.3, and Python is managed by uv and
# is installed with `make install` (project local, doesn't change
# your system. Only used when calling via `uv` in the project dir.)
requires-python = ">=3.12,<3.13"
dependencies = [
  "annotated-types>=0.7.0",
  "biopython>=1.83",
  "dependency-injector>=4.45.0",
  "devtools>=0.12.2",
  "elsapy>=0.5.0",
  "fastapi>=0.115.6",
  "langchain-anthropic>=0.3.1",
  "langchain-community>=0.3.14",
  "langchain-core>=0.3.29",
  "langchain-openai>=0.2.14",
  "langchain>=0.3.14",
  "langgraph-checkpoint-postgres>=2.0.12",
  "langgraph>=0.2.61",
  "langsmith>=0.3.6",
  "llama-index>=0.12.10",
  "logfire[fastapi,httpx,psycopg,sqlalchemy,system-metrics]>=3.5.3",
  "loguru>=0.7.3",
  "more-itertools>=10.6.0",
  "numpy==1.26.2",
  "openai>=1.14.0",
  "orjson>=3.10.15",
  "pandas-stubs>=2.2.3.241126",
  "pandas==2.1.4",
  "pandera[io]>=0.22.1",
  "psycopg2-binary>=2.9.10",
  "psycopg[binary,pool]>=3.2.4",
  "pydantic-extra-types>=2.10.2",
  "pydantic-settings>=2.7.1",
  "pydantic>=2.10.4",
  "pypdf>=5.1.0,<6.0.0",
  "python-docx==1.0.1",
  "sqlalchemy[asyncio]>=2.0.36",
  "sqlmodel>=0.0.22",
  "streamlit-aggrid>=1.1.0",
  "streamlit-antd-components>=0.3.2",
  "streamlit-elements>=0.1.0",
  "streamlit-extras>=0.5.0",
  "streamlit-pydantic",
  "streamlit>=1.41.1",
  "supabase>=2.11.0",
  "uuid6>=2024.7.10",
  "openpyxl>=3.1.5",
  "langchain-google-genai>=2.1.2",
]

[dependency-groups]
dev = [
  "pytest>=7.4.3",
  "pytest-cov>=6.0.0",
  "pytest-sugar>=1.0.0",
  "pytest-xdist>=3.6.1",
  "ruff>=0.8.6",
  "mypy>=1.14.1",
  "coverage>=7.6.10",
  "pre-commit>=4.0.1",
  "hypothesis>=6.123.13",
  "ipython>=8.31.0",
  "alembic[tz]>=1.14.0",
  "line-profiler>=4.2.0",
  "datamodel-code-generator[graphql,http]>=0.26.5",
  "devtools>=0.12.2",
  "jsonref>=1.1.0",
  "logot>=1.3.0",
  "pytest-asyncio>=0.25.3",
  "pytest-mock>=3.14.0",
  "mock-alchemy>=0.2.6",
  "langchain-mcp-tools>=0.1.7",
  "pyright>=1.1.395",
  "pytest-dotenv>=0.5.2",
  "pyupgrade>=3.19.1",
]
security = ["pip-audit>=2.7.3", "ruff>=0.8.6"]
observability = [
  "logfire[fastapi,httpx,psycopg,sqlalchemy,system-metrics]>=3.5.3",
  "opentelemetry-instrumentation-aiohttp-client>=0.51b0",
  "opentelemetry-instrumentation-fastapi>=0.51b0",
  "opentelemetry-instrumentation-httpx>=0.51b0",
  "opentelemetry-instrumentation-jinja2>=0.51b0",
  "opentelemetry-instrumentation-psycopg>=0.51b0",
  "opentelemetry-instrumentation-psycopg2>=0.51b0",
  "opentelemetry-instrumentation-requests>=0.51b0",
  "opentelemetry-instrumentation-sqlalchemy>=0.51b0",
  "opentelemetry-instrumentation-sqlite3>=0.51b0",
  "opentelemetry-instrumentation-tornado>=0.51b0",
  "opentelemetry-instrumentation-urllib>=0.51b0",
]

[tool.logfire]
pydantic_plugin_record = "all"

[tool.hatch.build.targets.wheel]
packages = ["src/sr_assistant"]

[tool.pyright]
stubPath = "typings"
useLibraryCodeForTypes = true
venvPath = "."
venv = ".venv"
extraPaths = [
  "src/sr_assistant/step1",
  "src/sr_assistant/step2",
  "src/sr_assistant/step3",
  "src/sr_assistant/step4",
  "src/sr_assistant/core",
  "src/sr_assistant/app",
  "src/sr_assistant",
  "tools",
]
pythonVersion = "3.12"
typeCheckingMode = "strict"
include = ["src/sr_assistant/**", "tests/**", "tools/**"]
reportImportCycles = true
analyzeUnannotatedFunctions = true
enableReachabilityAnalysis = true
enableExperimentalFeatures = true
reportMatchNotExhaustive = "warning"
reportDeprecated = true
reportOptionalCall = true
reportUnusedVariable = true
reportIncompleteStub = true
reportPropertyTypeMismatch = true
deprecateTypingAliases = true
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportImplicitStringConcatenation = true
reportShadowedImports = false # too annoying
reportUninitializedInstanceVariable = true
# Library code causing these all the time
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownParameterType = false
reportUnknownLambdaType = false
#reportAttributeAccessIssue = false

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
mypy_path = "./src/sr_assistant/:./tests"
files = ["src/sr_assistant", "tests"]
exclude = ["typings"]

[tool.ruff]
line-length = 88

src = ["src/sr_assistant", "tests"]
namespace-packages = []
target-version = "py312"
respect-gitignore = true

extend-exclude = [
  "generated",
  "3rdparty",
  "vendor",
  "typings",
  ".pytest_cache",
  "tools",
]
fix = true

[tool.ruff.lint]
logger-objects = ["loguru.logger"]
select = ["ALL"]
ignore = [
  "ANN401",  # Can't use Any for *args or **kwargs
  "BLE001",  # except Exception
  "COM812",  # Trailing comma
  "D100",    # Missing docstring in public module
  "D103",    # Missing docstring
  "D104",    # Missing docstring in public package
  "D400",    # First line should end with a period TODO: enable this
  "D412",    # newline after docstring section: to create a note admonition in mkdocstrings docs, a blank line is needed
  "FIX001",  # FIXME: comments are reported by this rule. We use other tools to scan for TODO etc. comments.
  "FIX002",  # TODO comments
  "E501",    # Line too long, formatting will handle and sometimes it's fine
  "ERA001",  # Commented-out code
  "ISC001",
  "G004",    # Logging statement uses f-string
  "PGH003",  # type: ignore
  "PLE1205", # too many arguments for `logging` format string, not for loguru
  #"PLR",     # Design related pylint codes
  #"PT011",   # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception"
  "T201",   # Use of print
  "TD001",  # incorret TODO comment label, e.g., this flags FIXME which is valid in our project. TODO: is this configurable?
  "TD002",
  "TD003",
  "TRY300", # Use else in try except
  "UP017",  # datetime.UTC instead of datetime.timezone.utc. Don't think so.
]
fixable = ["ALL"]
unfixable = [
  "T20",   # Removes print statements
  "F841",  # Removes unused variables
  "UP017", # datetime.UTC instead of datetime.timezone.utc. Don't think so.

]

task-tags = ["TODO", "FIXME", "XXX", "HACK", "BUG", "NOTE", "PERF"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.format]
quote-style = "double"
exclude = ["generated", "3rdparty", "vendor"]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["declared_attr", "field_validator", "model_validator"]
property-decorators = ["property", 'functools.cached_property']

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
  "chr",
  "typer.Argument",
  "typer.Option",
  "fastapi.Depends",
  "fastapi.Query",
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "type", "input"]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = []

[tool.ruff.lint.isort]
known-first-party = [
  "sr_assistant",
  "sr_assistant.step1",
  "sr_assistant.step2",
  "sr_assistant.step3",
  "sr_assistant.step4",
  "sr_assistant.core",
  "sr_assistant.app",
]
required-imports = []

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "ANN201", # missing return type annotation
  "T20",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "S101",   # use of "assert"
  "S102",   # use of "exec"
  "S106",   # possible hardcoded password.
]
"tools/**" = [
  "S603", # `subprocess` call: check for execution of untrusted input (false positive)
  "S607", # Starting a process with a partial executable path (don't care)
]
"src/sr_assistant/core/models.py" = [
  "UP037",
  # "TC008", quoted type alias, documented but current vscode extension doesn't support
] # from __future__ import annotations break sqlmodel/alchemy, and seems quoted types are neeeded in relationships
[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
avoid-escape = true

[tool.ruff.lint.pycodestyle]
max-line-length = 88
max-doc-length = 200
ignore-overlong-task-comments = true

[tool.pytest.ini_options]
addopts = "-vvv -ra -q --import-mode=importlib"
pythonpath = ["src/sr_assistant", "tools/"]
testpaths = ["tests/unit"]
markers = [
  "integration: marks tests as integration tests (require database connection)",
  "unit: marks tests as unit tests (default)",
]
filterwarnings = ["ignore::UserWarning"]
env_files = [".env", ".env.test"]
env_override_existing_values = true

[tool.coverage.run]
source = ["src/sr_assistant"]
branch = true
omit = ["tests/**", "**/__init__.py", "**/_*.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if t.TYPE_CHECKING:",
]
show_missing = true
fail_under = 0 # Set minimum coverage percentage when ready

[tool.uv.sources]
streamlit-pydantic = { git = "https://github.com/lukasmasuch/streamlit-pydantic.git" }


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
