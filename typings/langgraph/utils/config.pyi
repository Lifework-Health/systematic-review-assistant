"""This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from typing import Any

from langchain_core.callbacks import AsyncCallbackManager, CallbackManager, Callbacks
from langchain_core.runnables import RunnableConfig
from langgraph.checkpoint.base import CheckpointMetadata

def patch_configurable(
    config: RunnableConfig | None, patch: dict[str, Any]
) -> RunnableConfig: ...
def patch_checkpoint_map(
    config: RunnableConfig | None, metadata: CheckpointMetadata | None
) -> RunnableConfig: ...
def merge_configs(*configs: RunnableConfig | None) -> RunnableConfig:
    """Merge multiple configs into one.

    Args:
        *configs (Optional[RunnableConfig]): The configs to merge.

    Returns:
        RunnableConfig: The merged config.
    """

def patch_config(
    config: RunnableConfig | None,
    *,
    callbacks: Callbacks | None = ...,
    recursion_limit: int | None = ...,
    max_concurrency: int | None = ...,
    run_name: str | None = ...,
    configurable: dict[str, Any] | None = ...,
) -> RunnableConfig:
    """Patch a config with new values.

    Args:
        config (Optional[RunnableConfig]): The config to patch.
        callbacks (Optional[BaseCallbackManager], optional): The callbacks to set.
          Defaults to None.
        recursion_limit (Optional[int], optional): The recursion limit to set.
          Defaults to None.
        max_concurrency (Optional[int], optional): The max concurrency to set.
          Defaults to None.
        run_name (Optional[str], optional): The run name to set. Defaults to None.
        configurable (Optional[Dict[str, Any]], optional): The configurable to set.
          Defaults to None.

    Returns:
        RunnableConfig: The patched config.
    """

def get_callback_manager_for_config(
    config: RunnableConfig, tags: Sequence[str] | None = ...
) -> CallbackManager:
    """Get a callback manager for a config.

    Args:
        config (RunnableConfig): The config.

    Returns:
        CallbackManager: The callback manager.
    """

def get_async_callback_manager_for_config(
    config: RunnableConfig, tags: Sequence[str] | None = ...
) -> AsyncCallbackManager:
    """Get an async callback manager for a config.

    Args:
        config (RunnableConfig): The config.

    Returns:
        AsyncCallbackManager: The async callback manager.
    """

def ensure_config(*configs: RunnableConfig | None) -> RunnableConfig:
    """Ensure that a config is a dict with all keys present.

    Args:
        config (Optional[RunnableConfig], optional): The config to ensure.
          Defaults to None.

    Returns:
        RunnableConfig: The ensured config.
    """

def get_configurable() -> dict[str, Any]: ...
