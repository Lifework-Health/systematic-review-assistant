"""This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from collections.abc import AsyncIterator, Iterator, Sequence
from typing import Any, Self, Union

from langchain_core.runnables import Runnable, RunnableConfig
from langchain_core.runnables.graph import Graph as DrawableGraph
from langgraph.pregel.types import All, StateSnapshot, StreamMode

class PregelProtocol(
    Runnable[Union[dict[str, Any], Any], Union[dict[str, Any], Any]], ABC
):
    @abstractmethod
    def with_config(
        self, config: RunnableConfig | None = ..., **kwargs: Any
    ) -> Self: ...
    @abstractmethod
    def get_graph(
        self, config: RunnableConfig | None = ..., *, xray: int | bool = ...
    ) -> DrawableGraph: ...
    @abstractmethod
    async def aget_graph(
        self, config: RunnableConfig | None = ..., *, xray: int | bool = ...
    ) -> DrawableGraph: ...
    @abstractmethod
    def get_state(
        self, config: RunnableConfig, *, subgraphs: bool = ...
    ) -> StateSnapshot: ...
    @abstractmethod
    async def aget_state(
        self, config: RunnableConfig, *, subgraphs: bool = ...
    ) -> StateSnapshot: ...
    @abstractmethod
    def get_state_history(
        self,
        config: RunnableConfig,
        *,
        filter: dict[str, Any] | None = ...,
        before: RunnableConfig | None = ...,
        limit: int | None = ...,
    ) -> Iterator[StateSnapshot]: ...
    @abstractmethod
    def aget_state_history(
        self,
        config: RunnableConfig,
        *,
        filter: dict[str, Any] | None = ...,
        before: RunnableConfig | None = ...,
        limit: int | None = ...,
    ) -> AsyncIterator[StateSnapshot]: ...
    @abstractmethod
    def update_state(
        self,
        config: RunnableConfig,
        values: dict[str, Any] | Any | None,
        as_node: str | None = ...,
    ) -> RunnableConfig: ...
    @abstractmethod
    async def aupdate_state(
        self,
        config: RunnableConfig,
        values: dict[str, Any] | Any | None,
        as_node: str | None = ...,
    ) -> RunnableConfig: ...
    @abstractmethod
    def stream(
        self,
        input: dict[str, Any] | Any,
        config: RunnableConfig | None = ...,
        *,
        stream_mode: StreamMode | list[StreamMode] | None = ...,
        interrupt_before: All | Sequence[str] | None = ...,
        interrupt_after: All | Sequence[str] | None = ...,
        subgraphs: bool = ...,
    ) -> Iterator[dict[str, Any] | Any]: ...
    @abstractmethod
    def astream(
        self,
        input: dict[str, Any] | Any,
        config: RunnableConfig | None = ...,
        *,
        stream_mode: StreamMode | list[StreamMode] | None = ...,
        interrupt_before: All | Sequence[str] | None = ...,
        interrupt_after: All | Sequence[str] | None = ...,
        subgraphs: bool = ...,
    ) -> AsyncIterator[dict[str, Any] | Any]: ...
    @abstractmethod
    def invoke(
        self,
        input: dict[str, Any] | Any,
        config: RunnableConfig | None = ...,
        *,
        interrupt_before: All | Sequence[str] | None = ...,
        interrupt_after: All | Sequence[str] | None = ...,
    ) -> dict[str, Any] | Any: ...
    @abstractmethod
    async def ainvoke(
        self,
        input: dict[str, Any] | Any,
        config: RunnableConfig | None = ...,
        *,
        interrupt_before: All | Sequence[str] | None = ...,
        interrupt_after: All | Sequence[str] | None = ...,
    ) -> dict[str, Any] | Any: ...
