"""This type stub file was generated by pyright.
"""

from collections.abc import Iterator, Mapping, Sequence
from typing import Any, Literal, TypeVar

from langchain_core.runnables.utils import AddableDict
from langgraph.channels.base import BaseChannel
from langgraph.checkpoint.base import PendingWrite
from langgraph.types import Command, PregelExecutableTask

def is_task_id(task_id: str) -> bool:
    """Check if a string is a valid task id."""

def read_channel(
    channels: Mapping[str, BaseChannel],
    chan: str,
    *,
    catch: bool = ...,
    return_exception: bool = ...,
) -> Any: ...
def read_channels(
    channels: Mapping[str, BaseChannel],
    select: Sequence[str] | str,
    *,
    skip_empty: bool = ...,
) -> dict[str, Any] | Any: ...
def map_command(
    cmd: Command, pending_writes: list[PendingWrite]
) -> Iterator[tuple[str, str, Any]]:
    """Map input chunk to a sequence of pending writes in the form (channel, value)."""

def map_input(
    input_channels: str | Sequence[str],
    chunk: dict[str, Any] | Any | None,
) -> Iterator[tuple[str, Any]]:
    """Map input chunk to a sequence of pending writes in the form (channel, value)."""

class AddableValuesDict(AddableDict):
    def __add__(self, other: dict[str, Any]) -> AddableValuesDict: ...
    def __radd__(self, other: dict[str, Any]) -> AddableValuesDict: ...

def map_output_values(
    output_channels: str | Sequence[str],
    pending_writes: Literal[True] | Sequence[tuple[str, Any]],
    channels: Mapping[str, BaseChannel],
) -> Iterator[dict[str, Any] | Any]:
    """Map pending writes (a sequence of tuples (channel, value)) to output chunk."""

class AddableUpdatesDict(AddableDict):
    def __add__(self, other: dict[str, Any]) -> AddableUpdatesDict: ...
    def __radd__(self, other: dict[str, Any]) -> AddableUpdatesDict: ...

def map_output_updates(
    output_channels: str | Sequence[str],
    tasks: list[tuple[PregelExecutableTask, Sequence[tuple[str, Any]]]],
    cached: bool = ...,
) -> Iterator[dict[str, Any | dict[str, Any]]]:
    """Map pending writes (a sequence of tuples (channel, value)) to output chunk."""

T = TypeVar("T")

def single(iter: Iterator[T]) -> T | None: ...
