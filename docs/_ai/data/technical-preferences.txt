# User-Defined Preferred Patterns and Preferences

Always follow these user preferences and project rules!

## Code

### Python
- 3.12, ruff linting (almost all rules enabled) and formatting, pyright LSP/typings (strict)
- After editing files, run: `tools/py-fix-format.sh`. Note that output is supressed, you get linter errors already from the IDE. This script simply tries to fix everything it can without noise.
- Use service-layer pattern, repository pattern (with service controlled sessions), borrow from Hexagonal Architecture and Clean Architecture as needed.
- Do not write complex or complicated code. Read your code at least once and think of how to simplify before writing it out to a file/editing a file.
  - You've a tendency to overengineer and introduce unnecessary complexity. Always aim for simplecity even if it means a bit of repetition. We do not want code to clever it takes effort to understand.
- Apply design patterns when they simplify code, make it more maintainable, or introduce useful abstractions.

```python
# Always use super() when declaring a custom exception
class MyException(Exception):
    def __init__(self, msg: str) -> None:
      self.super(msg)

# Always use logger.exception to log exceptions. DO NOT include the exc or any part of it in the f-string or format string. This leads to duplication as Loguru handles all that already.
logger.exception(f"loguru adds exc and traceback, so do not include {e} like this.")

# Use child logger to create context specific loggers with bound variables in 'extra'
ctx_logger = logger.bind(some_var=some_ctx_var)

# Do not use deprecated types or import wrong types from typing. Do not use typing_extensions. 3.12 doesn't need any of that.
from typing import NamedTuple
from collections.abc import MutableMapping
# Ruff is configured to warn of incorrect imports, so ALWAYS FIX LINTING ERRORS.
```

- Do NOT use TypeVar or other deprecated constructs like Generic, this is Python 3.12 and none of that is needed, IT IS DEPRECATED.
- Never delete code you were not told to delete! You've a habit of doing this and it degrades your value.
- Add meaningful comments that explain why or how when code gets complex and non-obvious. NEVER add commnts like `import pandas as pd  # import pandas`. That's code littering.

