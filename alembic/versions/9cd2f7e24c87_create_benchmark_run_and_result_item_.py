"""create_benchmark_run_and_result_item_tables

Revision ID: 9cd2f7e24c87
Revises: 39a7520b10c2
Create Date: 2025-05-20 13:20:38.851745+00:00

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op  # pyright: ignore[reportUnknownMemberType]
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9cd2f7e24c87"
down_revision: str | None = "39a7520b10c2"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()

    # Check if benchmark_runs table already exists
    benchmark_runs_exists = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name = 'benchmark_runs'
        )
    """)
    ).scalar()

    if not benchmark_runs_exists:
        op.create_table(
            "benchmark_runs",
            sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column(
                "updated_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                onupdate=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column("review_id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column(
                "config_details", postgresql.JSONB(astext_type=sa.Text()), nullable=True
            ),
            sa.Column("run_notes", sa.Text(), nullable=True),
            sa.Column("tp", sa.Integer(), nullable=True),
            sa.Column("fp", sa.Integer(), nullable=True),
            sa.Column("fn", sa.Integer(), nullable=True),
            sa.Column("tn", sa.Integer(), nullable=True),
            sa.Column("sensitivity", sa.Float(), nullable=True),
            sa.Column("specificity", sa.Float(), nullable=True),
            sa.Column("accuracy", sa.Float(), nullable=True),
            sa.Column("ppv", sa.Float(), nullable=True),
            sa.Column("npv", sa.Float(), nullable=True),
            sa.Column("f1_score", sa.Float(), nullable=True),
            sa.Column("mcc", sa.Float(), nullable=True),
            sa.Column("cohen_kappa", sa.Float(), nullable=True),
            sa.Column("pabak", sa.Float(), nullable=True),
            sa.Column("lr_plus", sa.Float(), nullable=True),
            sa.Column("lr_minus", sa.Float(), nullable=True),
            sa.ForeignKeyConstraint(["review_id"], ["systematic_reviews.id"]),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            op.f("ix_benchmark_runs_review_id"),
            "benchmark_runs",
            ["review_id"],
            unique=False,
        )

        # Create GIN index for config_details
        op.create_index(
            "ix_benchmark_runs_on_config_details_gin",
            "benchmark_runs",
            [sa.text("config_details")],
            unique=False,
            postgresql_using="gin",
        )

    # Check if benchmark_result_items table already exists
    benchmark_result_items_exists = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name = 'benchmark_result_items'
        )
    """)
    ).scalar()

    if not benchmark_result_items_exists:
        # Ensure the ENUM type for ScreeningDecisionType exists
        screening_decision_type_enum = postgresql.ENUM(
            "include",
            "exclude",
            "uncertain",
            name="screeningdecisiontype",
            create_type=False,
        )

        op.create_table(
            "benchmark_result_items",
            sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column(
                "updated_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                onupdate=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column(
                "benchmark_run_id", postgresql.UUID(as_uuid=True), nullable=False
            ),
            sa.Column(
                "search_result_id", postgresql.UUID(as_uuid=True), nullable=False
            ),
            sa.Column("human_decision", sa.Boolean(), nullable=True),
            sa.Column(
                "conservative_decision", screening_decision_type_enum, nullable=True
            ),
            sa.Column("conservative_confidence", sa.Float(), nullable=True),
            sa.Column("conservative_rationale", sa.Text(), nullable=True),
            sa.Column(
                "comprehensive_decision", screening_decision_type_enum, nullable=True
            ),
            sa.Column("comprehensive_confidence", sa.Float(), nullable=True),
            sa.Column("comprehensive_rationale", sa.Text(), nullable=True),
            sa.Column("resolver_decision", screening_decision_type_enum, nullable=True),
            sa.Column("resolver_confidence", sa.Float(), nullable=True),
            sa.Column("resolver_reasoning", sa.Text(), nullable=True),
            sa.Column("final_decision", screening_decision_type_enum, nullable=False),
            sa.Column("classification", sa.Text(), nullable=False),
            sa.ForeignKeyConstraint(["benchmark_run_id"], ["benchmark_runs.id"]),
            sa.ForeignKeyConstraint(["search_result_id"], ["search_results.id"]),
            sa.PrimaryKeyConstraint("id"),
        )

        # Create indexes for benchmark_result_items
        op.create_index(
            op.f("ix_benchmark_result_items_benchmark_run_id"),
            "benchmark_result_items",
            ["benchmark_run_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_benchmark_result_items_search_result_id"),
            "benchmark_result_items",
            ["search_result_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_benchmark_result_items_conservative_decision"),
            "benchmark_result_items",
            ["conservative_decision"],
            unique=False,
        )
        op.create_index(
            op.f("ix_benchmark_result_items_comprehensive_decision"),
            "benchmark_result_items",
            ["comprehensive_decision"],
            unique=False,
        )
        op.create_index(
            op.f("ix_benchmark_result_items_resolver_decision"),
            "benchmark_result_items",
            ["resolver_decision"],
            unique=False,
        )
        op.create_index(
            op.f("ix_benchmark_result_items_final_decision"),
            "benchmark_result_items",
            ["final_decision"],
            unique=False,
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_benchmark_result_items_final_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_resolver_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_comprehensive_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_conservative_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_search_result_id"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_benchmark_run_id"),
        table_name="benchmark_result_items",
    )
    op.drop_table("benchmark_result_items")

    op.drop_index(op.f("ix_benchmark_runs_review_id"), table_name="benchmark_runs")
    op.drop_table("benchmark_runs")

    # If the enum was created in this migration's upgrade, drop it in downgrade.
    # screening_decision_type_enum = postgresql.ENUM('INCLUDE', 'EXCLUDE', 'UNCERTAIN', name='screeningdecisiontype')
    # screening_decision_type_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
