"""refactor models

Revision ID: a8b474163c4b
Revises: 0ab256b04824
Create Date: 2025-02-07 03:52:49.765273+00:00

"""

from typing import Union
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a8b474163c4b"
down_revision: str | None = "0ab256b04824"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "pubmed_results_review_id_fkey", "pubmed_results", type_="foreignkey"
    )
    op.drop_table("uuid_test")
    op.drop_index(
        "ix_abstract_screening_results_review_id",
        table_name="abstract_screening_results",
    )
    op.drop_index(
        "ix_abstract_screening_results_search_result_id",
        table_name="abstract_screening_results",
    )
    op.drop_table("abstract_screening_results")
    op.drop_table("reviews")
    # sa.Enum(name="screeningdecisiontype").drop(op.get_bind(), checkfirst=True)
    # sa.Enum(name="screeningstrategytype").drop(op.get_bind(), checkfirst=True)
    op.execute("""DROP TYPE IF EXISTS screeningdecisiontype CASCADE""")
    op.execute("""DROP TYPE IF EXISTS screeningstrategytype CASCADE""")

    op.create_table(
        "systematic_reviews",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("background", sa.Text(), nullable=False),
        sa.Column("research_question", sa.Text(), nullable=False),
        sa.Column("inclusion_criteria", sa.Text(), nullable=False),
        sa.Column("exclusion_criteria", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "screen_abstract_results",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column(
            "decision",
            postgresql.ENUM(
                "include", "exclude", "uncertain", name="screeningdecisiontype"
            ),
            nullable=False,
        ),
        sa.Column("confidence_score", sa.Float(), nullable=False),
        sa.Column("rationale", sa.Text(), nullable=False),
        sa.Column("extracted_quotes", postgresql.ARRAY(sa.Text()), nullable=True),
        sa.Column(
            "exclusion_reason_categories",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("start_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("end_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "screening_strategy",
            postgresql.ENUM(
                "conservative", "comprehensive", name="screeningstrategytype"
            ),
            nullable=False,
        ),
        sa.Column("model_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "response_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("review_id", sa.Uuid(), nullable=False),
        sa.Column("pubmed_result_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["pubmed_result_id"],
            ["pubmed_results.id"],
        ),
        sa.ForeignKeyConstraint(
            ["review_id"],
            ["systematic_reviews.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_index(
        op.f("ix_screen_abstract_results_pubmed_result_id"),
        "screen_abstract_results",
        ["pubmed_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_screen_abstract_results_review_id"),
        "screen_abstract_results",
        ["review_id"],
        unique=False,
    )
    op.add_column(
        "pubmed_results",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
    )
    op.add_column(
        "pubmed_results", sa.Column("conservative_result_id", sa.Uuid(), nullable=True)
    )
    op.add_column(
        "pubmed_results", sa.Column("comprehensive_result_id", sa.Uuid(), nullable=True)
    )
    op.alter_column(
        "pubmed_results",
        "query",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "pubmed_results",
        "abstract",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_pubmed_results_comprehensive_result_id"),
        "pubmed_results",
        ["comprehensive_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_pubmed_results_conservative_result_id"),
        "pubmed_results",
        ["conservative_result_id"],
        unique=False,
    )
    op.create_foreign_key(
        None,
        "pubmed_results",
        "screen_abstract_results",
        ["comprehensive_result_id"],
        ["id"],
    )
    op.create_foreign_key(
        None,
        "pubmed_results",
        "screen_abstract_results",
        ["conservative_result_id"],
        ["id"],
    )
    op.create_foreign_key(
        None,
        "pubmed_results",
        "systematic_reviews",
        ["review_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""DROP TYPE IF EXISTS screeningdecisiontype CASCADE""")
    op.execute("""DROP TYPE IF EXISTS screeningstrategytype CASCADE""")

    op.create_table(
        "reviews",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("background", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("question", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "inclusion_criteria", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "exclusion_criteria", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="reviews_pkey"),
    )

    op.create_table(
        "abstract_screening_results",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("review_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("search_result_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "confidence_score",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("rationale", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "extracted_quotes",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "exclusion_reason_categories",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["review_id"],
            ["reviews.id"],
            name="abstract_screening_results_review_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["search_result_id"],
            ["pubmed_results.id"],
            name="abstract_screening_results_search_result_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="abstract_screening_results_pkey"),
    )
    op.create_index(
        "ix_abstract_screening_results_search_result_id",
        "abstract_screening_results",
        ["search_result_id"],
        unique=False,
    )
    op.create_index(
        "ix_abstract_screening_results_review_id",
        "abstract_screening_results",
        ["review_id"],
        unique=False,
    )

    op.create_table(
        "uuid_test",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("data", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="uuid_test_pkey"),
    )

    op.create_foreign_key(
        "pubmed_results_review_id_fkey",
        "pubmed_results",
        "reviews",
        ["review_id"],
        ["id"],
    )
    op.alter_column(
        "pubmed_results",
        "abstract",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "pubmed_results",
        "query",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )

    op.drop_index(
        op.f("ix_pubmed_results_conservative_result_id"), table_name="pubmed_results"
    )
    op.drop_index(
        op.f("ix_pubmed_results_comprehensive_result_id"), table_name="pubmed_results"
    )
    op.drop_constraint(None, "pubmed_results", type_="foreignkey")
    op.drop_constraint(None, "pubmed_results", type_="foreignkey")
    op.drop_constraint(None, "pubmed_results", type_="foreignkey")
    op.drop_column("pubmed_results", "comprehensive_result_id")
    op.drop_column("pubmed_results", "conservative_result_id")
    op.drop_column("pubmed_results", "updated_at")
    op.drop_table("systematic_reviews")
    op.drop_index(
        op.f("ix_screen_abstract_results_review_id"),
        table_name="screen_abstract_results",
    )
    op.drop_index(
        op.f("ix_screen_abstract_results_pubmed_result_id"),
        table_name="screen_abstract_results",
    )
    op.drop_table("screen_abstract_results")
    # ### end Alembic commands ###
