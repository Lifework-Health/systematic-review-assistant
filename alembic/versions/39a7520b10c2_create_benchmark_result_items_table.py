"""create_benchmark_result_items_table

Revision ID: 39a7520b10c2
Revises: 446c386d3d77
Create Date: 2025-05-20 13:08:11.780683+00:00

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "39a7520b10c2"
down_revision: str | None = "446c386d3d77"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "benchmark_result_items",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("benchmark_run_id", sa.Uuid(), nullable=False),
        sa.Column("search_result_id", sa.Uuid(), nullable=False),
        sa.Column("human_decision", sa.Boolean(), nullable=True),
        sa.Column(
            "conservative_decision",
            postgresql.ENUM(
                "include",
                "exclude",
                "uncertain",
                name="screeningdecisiontype",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("conservative_confidence", sa.Float(), nullable=True),
        sa.Column("conservative_rationale", sa.Text(), nullable=True),
        sa.Column(
            "comprehensive_decision",
            postgresql.ENUM(
                "include",
                "exclude",
                "uncertain",
                name="screeningdecisiontype",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("comprehensive_confidence", sa.Float(), nullable=True),
        sa.Column("comprehensive_rationale", sa.Text(), nullable=True),
        sa.Column(
            "resolver_decision",
            postgresql.ENUM(
                "include",
                "exclude",
                "uncertain",
                name="screeningdecisiontype",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("resolver_confidence", sa.Float(), nullable=True),
        sa.Column("resolver_reasoning", sa.Text(), nullable=True),
        sa.Column(
            "final_decision",
            postgresql.ENUM(
                "include",
                "exclude",
                "uncertain",
                name="screeningdecisiontype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("classification", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(["benchmark_run_id"], ["benchmark_runs.id"]),
        sa.ForeignKeyConstraint(["search_result_id"], ["search_results.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_benchmark_result_items_benchmark_run_id"),
        "benchmark_result_items",
        ["benchmark_run_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_benchmark_result_items_comprehensive_decision"),
        "benchmark_result_items",
        ["comprehensive_decision"],
        unique=False,
    )
    op.create_index(
        op.f("ix_benchmark_result_items_conservative_decision"),
        "benchmark_result_items",
        ["conservative_decision"],
        unique=False,
    )
    op.create_index(
        op.f("ix_benchmark_result_items_final_decision"),
        "benchmark_result_items",
        ["final_decision"],
        unique=False,
    )
    op.create_index(
        op.f("ix_benchmark_result_items_resolver_decision"),
        "benchmark_result_items",
        ["resolver_decision"],
        unique=False,
    )
    op.create_index(
        op.f("ix_benchmark_result_items_search_result_id"),
        "benchmark_result_items",
        ["search_result_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_benchmark_result_items_search_result_id"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_resolver_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_final_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_conservative_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_comprehensive_decision"),
        table_name="benchmark_result_items",
    )
    op.drop_index(
        op.f("ix_benchmark_result_items_benchmark_run_id"),
        table_name="benchmark_result_items",
    )
    op.drop_table("benchmark_result_items")
    # ### end Alembic commands ###
