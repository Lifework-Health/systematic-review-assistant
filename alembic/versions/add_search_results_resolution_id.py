"""fix designtype enum

Revision ID: 868b4d1ee498
Revises: d122fe7364e6
Create Date: 2025-04-09 03:43:35.647352+00:00

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op  # pyright: ignore[reportUnknownMemberType]
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "868b4d1ee498"
down_revision: str | None = "d122fe7364e6"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # First, ensure the screening_resolutions table exists
    # Check if it already exists
    connection = op.get_bind()
    table_exists = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name = 'screening_resolutions'
        )
    """)
    ).scalar()

    if not table_exists:
        # Create the screening_resolutions table based on the ScreeningResolution model
        op.create_table(
            "screening_resolutions",
            sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column(
                "updated_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("TIMEZONE('UTC', CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column(
                "search_result_id", postgresql.UUID(as_uuid=True), nullable=False
            ),
            sa.Column("review_id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column(
                "resolver_decision",
                postgresql.ENUM(
                    "include",
                    "exclude",
                    "uncertain",
                    name="screeningdecisiontype",
                    create_type=False,
                ),
                nullable=False,
            ),
            sa.Column("resolver_reasoning", sa.Text(), nullable=False),
            sa.Column("resolver_confidence_score", sa.Float(), nullable=False),
            sa.Column("resolver_model_name", sa.String(), nullable=True),
            sa.Column(
                "response_metadata",
                postgresql.JSONB(astext_type=sa.Text()),
                nullable=False,
            ),
            sa.Column("start_time", sa.DateTime(timezone=True), nullable=True),
            sa.Column("end_time", sa.DateTime(timezone=True), nullable=True),
            sa.Column("trace_id", postgresql.UUID(as_uuid=True), nullable=True),
            sa.PrimaryKeyConstraint("id"),
            sa.ForeignKeyConstraint(["search_result_id"], ["search_results.id"]),
            sa.ForeignKeyConstraint(["review_id"], ["systematic_reviews.id"]),
        )

        # Create indexes for screening_resolutions
        op.create_index(
            op.f("ix_screening_resolutions_search_result_id"),
            "screening_resolutions",
            ["search_result_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_screening_resolutions_review_id"),
            "screening_resolutions",
            ["review_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_screening_resolutions_resolver_decision"),
            "screening_resolutions",
            ["resolver_decision"],
            unique=False,
        )
        op.create_index(
            op.f("ix_screening_resolutions_trace_id"),
            "screening_resolutions",
            ["trace_id"],
            unique=False,
        )
        # Create GIN index for response_metadata
        op.create_index(
            "ix_screening_resolutions_on_response_metadata_gin",
            "screening_resolutions",
            [sa.text("response_metadata")],
            unique=False,
            postgresql_using="gin",
        )

    # Check if resolution_id column already exists in search_results
    has_resolution_id = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'search_results' 
            AND column_name = 'resolution_id'
        )
    """)
    ).scalar()

    if not has_resolution_id:
        # Drop column from screen_abstract_results if it exists
        try:
            op.drop_column("screen_abstract_results", "search_result_id")
        except Exception:
            pass  # Column may not exist

        # Add resolution_id column to search_results
        op.add_column(
            "search_results",
            sa.Column("resolution_id", postgresql.UUID(as_uuid=True), nullable=True),
        )
        op.create_index(
            op.f("ix_search_results_resolution_id"),
            "search_results",
            ["resolution_id"],
            unique=False,
        )

        # Create foreign key constraint
        op.create_foreign_key(
            None, "search_results", "screening_resolutions", ["resolution_id"], ["id"]
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_screen_abstract_results_search_result_id",
        table_name="screen_abstract_results",
    )
    op.drop_constraint(
        "screen_abstract_results_search_result_id_fkey",
        "screen_abstract_results",
        type_="foreignkey",
    )
    op.drop_column("screen_abstract_results", "search_result_id")
    op.drop_constraint(None, "search_results", type_="foreignkey")
    op.drop_index(op.f("ix_search_results_resolution_id"), table_name="search_results")
    op.drop_column("search_results", "resolution_id")
    op.add_column(
        "screen_abstract_results",
        sa.Column("search_result_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "screen_abstract_results_search_result_id_fkey",
        "screen_abstract_results",
        "search_results",
        ["search_result_id"],
        ["id"],
    )
    op.create_index(
        "ix_screen_abstract_results_search_result_id",
        "screen_abstract_results",
        ["search_result_id"],
        unique=False,
    )
    # ### end Alembic commands ###
