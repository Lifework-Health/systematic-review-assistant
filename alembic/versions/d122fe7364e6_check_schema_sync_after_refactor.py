"""check_schema_sync_after_refactor

Revision ID: d122fe7364e6
Revises: 3c121a82c373
Create Date: 2025-04-08 18:35:16.599088+00:00

"""

from __future__ import annotations

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op  # pyright: ignore[reportAttributeAccessIssue]
from loguru import logger
from sqlalchemy.exc import ProgrammingError

# revision identifiers, used by Alembic.
revision: str = "d122fe7364e6"
down_revision: str | None = "3c121a82c373"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # First, check if the screening_resolutions table has the columns we're trying to remove
    # If they don't exist, the refactor has already been done
    connection = op.get_bind()

    # Check if comprehensive_result_id column exists on screening_resolutions
    has_comprehensive_col = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'screening_resolutions' 
            AND column_name = 'comprehensive_result_id'
        )
    """)
    ).scalar()

    # Check if conservative_result_id column exists on screening_resolutions
    has_conservative_col = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'screening_resolutions' 
            AND column_name = 'conservative_result_id'
        )
    """)
    ).scalar()

    # Only proceed with drops if columns exist
    if has_comprehensive_col or has_conservative_col:
        logger.info(
            "Found columns to refactor on screening_resolutions, proceeding with refactor"
        )

        # Drop indexes first
        op.drop_index(
            "ix_screening_resolutions_comprehensive_result_id",
            table_name="screening_resolutions",
            if_exists=True,
        )
        op.drop_index(
            "ix_screening_resolutions_conservative_result_id",
            table_name="screening_resolutions",
            if_exists=True,
        )

        # Drop foreign key constraints
        try:
            op.drop_constraint(
                "screening_resolutions_comprehensive_result_id_fkey",
                "screening_resolutions",
                type_="foreignkey",
            )
        except ProgrammingError as e:
            logger.warning(
                f"Constraint screening_resolutions_comprehensive_result_id_fkey not found, skipping drop: {e}"
            )

        try:
            op.drop_constraint(
                "screening_resolutions_conservative_result_id_fkey",
                "screening_resolutions",
                type_="foreignkey",
            )
        except ProgrammingError as e:
            logger.warning(
                f"Constraint screening_resolutions_conservative_result_id_fkey not found, skipping drop: {e}"
            )

        # Drop columns
        if has_conservative_col:
            try:
                op.drop_column("screening_resolutions", "conservative_result_id")
            except ProgrammingError as e:
                logger.warning(
                    f"Column screening_resolutions.conservative_result_id not found, skipping drop: {e}"
                )

        if has_comprehensive_col:
            try:
                op.drop_column("screening_resolutions", "comprehensive_result_id")
            except ProgrammingError as e:
                logger.warning(
                    f"Column screening_resolutions.comprehensive_result_id not found, skipping drop: {e}"
                )
    else:
        logger.info(
            "Columns already removed from screening_resolutions, skipping drops"
        )

    # Check if search_results already has the new columns
    has_search_conservative = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'search_results' 
            AND column_name = 'conservative_result_id'
        )
    """)
    ).scalar()

    has_search_comprehensive = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'search_results' 
            AND column_name = 'comprehensive_result_id'
        )
    """)
    ).scalar()

    # Add columns to search_results if they don't exist
    if not has_search_conservative:
        op.add_column(
            "search_results",
            sa.Column("conservative_result_id", sa.Uuid(), nullable=True),
        )
    else:
        logger.info("conservative_result_id already exists on search_results")

    if not has_search_comprehensive:
        op.add_column(
            "search_results",
            sa.Column("comprehensive_result_id", sa.Uuid(), nullable=True),
        )
    else:
        logger.info("comprehensive_result_id already exists on search_results")

    # Create indexes and foreign keys (with if_exists checks)
    op.create_index(
        op.f("ix_search_results_comprehensive_result_id"),
        "search_results",
        ["comprehensive_result_id"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        op.f("ix_search_results_conservative_result_id"),
        "search_results",
        ["conservative_result_id"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        op.f("ix_search_results_keywords"),
        "search_results",
        ["keywords"],
        unique=False,
        if_not_exists=True,
    )
    op.create_index(
        op.f("ix_search_results_year"),
        "search_results",
        ["year"],
        unique=False,
        if_not_exists=True,
    )

    # Create foreign keys (these will fail silently if they already exist due to how Alembic handles FKs)
    try:
        op.create_foreign_key(
            None,
            "search_results",
            "screen_abstract_results",
            ["conservative_result_id"],
            ["id"],
        )
    except ProgrammingError as e:
        logger.info(f"Foreign key for conservative_result_id may already exist: {e}")

    try:
        op.create_foreign_key(
            None,
            "search_results",
            "screen_abstract_results",
            ["comprehensive_result_id"],
            ["id"],
        )
    except ProgrammingError as e:
        logger.info(f"Foreign key for comprehensive_result_id may already exist: {e}")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_search_results_year"), table_name="search_results")
    op.drop_index(op.f("ix_search_results_keywords"), table_name="search_results")
    op.drop_index(
        op.f("ix_search_results_conservative_result_id"), table_name="search_results"
    )
    op.drop_index(
        op.f("ix_search_results_comprehensive_result_id"), table_name="search_results"
    )
    op.drop_column("search_results", "comprehensive_result_id")
    op.drop_column("search_results", "conservative_result_id")
    try:
        op.add_column(
            "screening_resolutions",
            sa.Column(
                "comprehensive_result_id", sa.UUID(), autoincrement=False, nullable=True
            ),
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade add_column comprehensive_result_id for screening_resolutions due to: {e}"
        )

    try:
        op.add_column(
            "screening_resolutions",
            sa.Column(
                "conservative_result_id", sa.UUID(), autoincrement=False, nullable=True
            ),
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade add_column conservative_result_id for screening_resolutions due to: {e}"
        )

    try:
        op.create_foreign_key(
            "screening_resolutions_conservative_result_id_fkey",
            "screening_resolutions",
            "comprehensive_search_results",
            ["conservative_result_id"],
            ["id"],
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of screening_resolutions_conservative_result_id_fkey due to: {e}"
        )

    try:
        op.create_foreign_key(
            "screening_resolutions_comprehensive_result_id_fkey",
            "screening_resolutions",
            "comprehensive_search_results",
            ["comprehensive_result_id"],
            ["id"],
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of screening_resolutions_comprehensive_result_id_fkey due to: {e}"
        )

    try:
        op.create_index(
            "ix_screening_resolutions_conservative_result_id",
            "screening_resolutions",
            ["conservative_result_id"],
            unique=False,
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of ix_screening_resolutions_conservative_result_id due to: {e}"
        )

    try:
        op.create_index(
            "ix_screening_resolutions_comprehensive_result_id",
            "screening_resolutions",
            ["comprehensive_result_id"],
            unique=False,
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of ix_screening_resolutions_comprehensive_result_id due to: {e}"
        )

    # ### end Alembic commands ###
