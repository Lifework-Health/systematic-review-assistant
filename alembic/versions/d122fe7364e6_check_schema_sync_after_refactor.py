"""check_schema_sync_after_refactor

Revision ID: d122fe7364e6
Revises: 3c121a82c373
Create Date: 2025-04-08 18:35:16.599088+00:00

"""

from __future__ import annotations

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from loguru import logger
from sqlalchemy.exc import ProgrammingError

# revision identifiers, used by Alembic.
revision: str = "d122fe7364e6"
down_revision: str | None = "3c121a82c373"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_screening_resolutions_comprehensive_result_id",
        table_name="screening_resolutions",
        if_exists=True,
    )
    op.drop_index(
        "ix_screening_resolutions_conservative_result_id",
        table_name="screening_resolutions",
        if_exists=True,
    )
    try:
        op.drop_constraint(
            "screening_resolutions_comprehensive_result_id_fkey",
            "screening_resolutions",
            type_="foreignkey",
        )
    except ProgrammingError as e:
        logger.warning(
            f"Constraint screening_resolutions_comprehensive_result_id_fkey not found or table missing, skipping drop: {e}"
        )

    try:
        op.drop_constraint(
            "screening_resolutions_conservative_result_id_fkey",
            "screening_resolutions",
            type_="foreignkey",
        )
    except ProgrammingError as e:
        logger.warning(
            f"Constraint screening_resolutions_conservative_result_id_fkey not found or table missing, skipping drop: {e}"
        )

    try:
        op.drop_column("screening_resolutions", "conservative_result_id")
    except ProgrammingError as e:
        logger.warning(
            f"Column screening_resolutions.conservative_result_id not found or table missing, skipping drop: {e}"
        )

    try:
        op.drop_column("screening_resolutions", "comprehensive_result_id")
    except ProgrammingError as e:
        logger.warning(
            f"Column screening_resolutions.comprehensive_result_id not found or table missing, skipping drop: {e}"
        )

    op.add_column(
        "search_results", sa.Column("conservative_result_id", sa.Uuid(), nullable=True)
    )
    op.add_column(
        "search_results", sa.Column("comprehensive_result_id", sa.Uuid(), nullable=True)
    )
    op.create_index(
        op.f("ix_search_results_comprehensive_result_id"),
        "search_results",
        ["comprehensive_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_search_results_conservative_result_id"),
        "search_results",
        ["conservative_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_search_results_keywords"), "search_results", ["keywords"], unique=False
    )
    op.create_index(
        op.f("ix_search_results_year"), "search_results", ["year"], unique=False
    )
    op.create_foreign_key(
        None,
        "search_results",
        "screen_abstract_results",
        ["conservative_result_id"],
        ["id"],
    )
    op.create_foreign_key(
        None,
        "search_results",
        "screen_abstract_results",
        ["comprehensive_result_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "search_results", type_="foreignkey")
    op.drop_constraint(None, "search_results", type_="foreignkey")
    op.drop_index(op.f("ix_search_results_year"), table_name="search_results")
    op.drop_index(op.f("ix_search_results_keywords"), table_name="search_results")
    op.drop_index(
        op.f("ix_search_results_conservative_result_id"), table_name="search_results"
    )
    op.drop_index(
        op.f("ix_search_results_comprehensive_result_id"), table_name="search_results"
    )
    op.drop_column("search_results", "comprehensive_result_id")
    op.drop_column("search_results", "conservative_result_id")
    try:
        op.add_column(
            "screening_resolutions",
            sa.Column(
                "comprehensive_result_id", sa.UUID(), autoincrement=False, nullable=True
            ),
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade add_column comprehensive_result_id for screening_resolutions due to: {e}"
        )

    try:
        op.add_column(
            "screening_resolutions",
            sa.Column(
                "conservative_result_id", sa.UUID(), autoincrement=False, nullable=True
            ),
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade add_column conservative_result_id for screening_resolutions due to: {e}"
        )

    try:
        op.create_foreign_key(
            "screening_resolutions_conservative_result_id_fkey",
            "screening_resolutions",
            "comprehensive_search_results",
            ["conservative_result_id"],
            ["id"],
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of screening_resolutions_conservative_result_id_fkey due to: {e}"
        )

    try:
        op.create_foreign_key(
            "screening_resolutions_comprehensive_result_id_fkey",
            "screening_resolutions",
            "comprehensive_search_results",
            ["comprehensive_result_id"],
            ["id"],
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of screening_resolutions_comprehensive_result_id_fkey due to: {e}"
        )

    try:
        op.create_index(
            "ix_screening_resolutions_conservative_result_id",
            "screening_resolutions",
            ["conservative_result_id"],
            unique=False,
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of ix_screening_resolutions_conservative_result_id due to: {e}"
        )

    try:
        op.create_index(
            "ix_screening_resolutions_comprehensive_result_id",
            "screening_resolutions",
            ["comprehensive_result_id"],
            unique=False,
        )
    except ProgrammingError as e:
        logger.warning(
            f"Skipping downgrade recreate of ix_screening_resolutions_comprehensive_result_id due to: {e}"
        )

    # ### end Alembic commands ###
