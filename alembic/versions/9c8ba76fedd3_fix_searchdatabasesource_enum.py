"""fix_searchdatabasesource_enum

Revision ID: 9c8ba76fedd3
Revises: 868b4d1ee498
Create Date: 2025-04-09 08:39:37.633605+00:00

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op  # pyright: ignore[reportUnknownMemberType]
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9c8ba76fedd3"
down_revision: str | None = "868b4d1ee498"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if the enum already exists
    connection = op.get_bind()
    enum_exists = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM pg_type 
            WHERE typname = 'searchdatabasesource_enum'
        )
    """)
    ).scalar()

    if not enum_exists:
        db_src_enum = postgresql.ENUM(
            "PubMed", "Scopus", name="searchdatabasesource_enum"
        )
        db_src_enum.create(op.get_bind())

    # Check if source_db column already exists
    column_exists = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'search_results' 
            AND column_name = 'source_db'
        )
    """)
    ).scalar()

    if not column_exists:
        db_src_enum = postgresql.ENUM(
            "PubMed", "Scopus", name="searchdatabasesource_enum", create_type=False
        )
        op.add_column(
            "search_results", sa.Column("source_db", db_src_enum, nullable=False)
        )
        op.create_index(
            op.f("ix_search_results_source_db"),
            "search_results",
            ["source_db"],
            unique=False,
        )

    # Check if unique constraint already exists
    constraint_exists = connection.execute(
        sa.text("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.table_constraints 
            WHERE table_name = 'search_results' 
            AND constraint_name = 'uq_review_source_id'
        )
    """)
    ).scalar()

    if not constraint_exists:
        op.create_unique_constraint(
            "uq_review_source_id",
            "search_results",
            ["review_id", "source_db", "source_id"],
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_review_source_id", "search_results", type_="unique")
    op.drop_index(op.f("ix_search_results_source_db"), table_name="search_results")
    op.drop_column("search_results", "source_db")
    bind = op.get_bind()
    sa.Enum(name="searchdatabasesource_enum").drop(bind, checkfirst=False)
    # ### end Alembic commands ###
