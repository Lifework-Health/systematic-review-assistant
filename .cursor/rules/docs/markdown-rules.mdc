---
description: ALWAYS use when writing or updating Markdown files to ensure consistent formatting and readability. This rule enforces standardized Markdown practices across all documentation.
globs: **/*.{md,mdx,mdoc}
alwaysApply: false
---
# Markdown Documentation Standards

## Requirements

- Follow the official [Markdown Guide](mdc:https:/www.markdownguide.org) for all basic and extended syntax
- Follow [MarkDoc](mdc:https:/markdoc.io) guidelines, mdoc is often used for documentation
- Maintain clear document structure and readability
- Include appropriate metadata when required
- Use Mermaid diagrams for visual documentation where appropriate
- Always Include YAML front matter for metadata but Keep metadata concise

## Markdown Reference

For all basic and extended Markdown syntax, refer to:
- [Basic Syntax Guide](mdc:https:/www.markdownguide.org/basic-syntax)
- [Extended Syntax Guide](mdc:https:/www.markdownguide.org/extended-syntax)

## Formatting Rules

- Use ATX-style headings with space after hash: `# Heading`
- Maintain proper heading hierarchy (don't skip levels)
- Maximum heading depth: 4 levels
- Add blank line before and after headings
- Add blank line before and after listings
- Indent content within XML tags by 2 spaces
- Close XML tags on their own line at the parent indentation level
- Use blockquotes with emoji for different types of callouts:

<example>
  > üö® **Warning:** Critical information here.

  > üí° **Tip:** Helpful suggestion.

  > ‚ÑπÔ∏è **Note:** Additional context.
</example>

## Code Blocks

- Use triple backticks with language specification
- Indent code blocks properly
- Add blank line before and after
- Use inline code for short references

<example>
```typescript
function example(): void {
  console.log('Hello, Universe!');
}
```

Reference the `example()` function inline.
</example>

## Tables

- Use alignment indicators
- Include header row separator
- Keep tables simple and readable
- Add blank lines before and after
- Align tables to make them human readable

<example>
| Name    | Type    | Description    |
|:--------|:-------:|---------------:|
| id      | number  | Primary key    |
| name    | string  | User's name    |
</example>

## Special Elements

### Call-outs

Use block-quotes with emoji for different types of call-outs:

<example>
> üö® **Warning:** Critical information here.

> üí° **Tip:** Helpful suggestion.

> ‚ÑπÔ∏è **Note:** Additional context.
</example>

### Mermaid Diagrams

Use Mermaid diagrams to visualize:
- Architecture flows
- Database schemas (FKs, etc.)
- Process sequences
- Decision trees
- State machines
- Component relationships
- Class hierarchies
- AI agent rule flows
- UI flows
- User journeys (use actors)
- Control flows
- Data and event flows
- Workflows
- Non-trivial dependency chains, especially if cyclic

#### When to Use Mermaid

- Simple and Complex workflows need visualization
- System architecture needs to be explained
- Process flows have multiple branches
- State transitions need to be clear
- AI decision trees need to be mapped
- Code component/module/class relationships must be mapped

#### Mermaid Diagram Best Practices

1. Include clear titles using the `---` syntax
2. Use descriptive node labels
3. Add comments for complex flows
4. Group related components using subgraphs
5. Use consistent direction (TD/LR/TB)
6. Keep diagrams focused and specific
7. Keep diagrams human readable. Use descriptive yet concise nodes, e.g., GH for GitHub, not A, B, C, ... humans require constant referencing and context switching to follow the flow
8. DO NOT create overly wide diagrams, PREFER VERTICAL spacing.
9. Use colored boxes if it helps, use consistent colors, always add titles

<example>
```mermaid
---
title: Use explicit activation and deactivation
---
sequenceDiagram
    Alice->>John: Hello John, how are you?
    activate John
    John-->>Alice: Great!
    deactivate John
```
</example>

<example type="invalid">
```mermaid
---
title: Do not use shortcut notation
---
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    John-->>-Alice: Great!
```

This is hard to read, do not use this syntax.
</example>

<example>
```mermaid
---
title: Example Workflow
---
sequenceDiagram
    Alice->>Bob: Hello Bob, how are you ?
    Bob->>Alice: Fine, thank you. And you?
    create participant Carl
    Alice->>Carl: Hi Carl!
    create actor D as Donald
    Carl->>D: Hi!
    destroy Carl
    Alice-xCarl: We are too many
    destroy Bob
    Bob->>Alice: I agree
```
</example>

<example type="invalid">
```mermaid
graph TD
A-->B: `never use backticks in mermaid`
B-->C // this is an ERROR, not a comment
```

No title, unclear labels, no context
</example>
